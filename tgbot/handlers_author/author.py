from aiogram import Router, Bot, types
from aiogram.types import Message,FSInputFile
from tgbot.config import load_config
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import State, StatesGroup
import psycopg2
from psycopg2 import sql
from psycopg2.extensions import AsIs
from tgbot.config import  DB_URI
from random import randint
import datetime
from tgbot.filters.authors import AuthorFilter

from tgbot.misc.states import mailing, reg_author,getOrder, private_get
from tgbot.misc.function import check_id,auf_author

from tgbot.keyboards.textBtn import typeBtn,answer_speciality
from tgbot.keyboards.inline import confirm_buttons

from tgbot.db import orders_update

import asyncio


author_router = Router()
author_router.message.filter(AuthorFilter())
config = load_config(".env")
bot = Bot(token=config.tg_bot.token, parse_mode='HTML')
bot2 = Bot(token=config.tg_bot.token2, parse_mode='HTML')


@author_router.message(commands=["start"])
async def test_start(message: Message, state: FSMContext):
    print('handle in start')
    print(message.text)
    # if message.text == '/start':
    auf_status = await auf_author(str(message.from_user.id))
    btn = confirm_buttons()
    if auf_status:
        await message.reply("–í—ñ—Ç–∞–Ω–Ω—è!", reply_markup=btn.as_markup())
    else:
        await message.reply("–ü—Ä–∏–≤—ñ—Ç! üëã\n–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–∞—Ä—Ç–∏, –±–∞–∂–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É (—Ç—ñ–ª—å–∫–∏ –Ω–µ –¥–ª—è –≤–∏–ø–ª–∞—Ç)üí≥")
        await state.set_state(reg_author.get_card) 
    # elif message.text.isdigit() and auf_status == False:
    #     text = message.text
    #     await state.update_data(get_card=text) 
    #     btn = answer_speciality()
    #     await bot2.send_message(message.from_user.id,'–ß—É–¥–æ–≤–æ! üëç –í–∫–∞–∂–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "‚úÖ–ì–æ—Ç–æ–≤–æ"',reply_markup=btn.as_markup(resize_keyboard=True))
    #     await state.update_data(get_speciality = None) 
    #     await state.set_state(reg_author.get_speciality)  
        

@author_router.message_handler(content_types=types.ContentType.TEXT, state=private_get.money)
async def test_start(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(get_card=text) 
    btn = answer_speciality()
    await bot2.send_message(message.from_user.id,'–ß—É–¥–æ–≤–æ! üëç –í–∫–∞–∂–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "‚úÖ–ì–æ—Ç–æ–≤–æ"',reply_markup=btn.as_markup(resize_keyboard=True))
    await state.update_data(get_speciality = None) 
    await state.set_state(reg_author.get_speciality)
    # await orders_update.update_answer(message.text,str(message.from_user.id))
    # await state.clear()
# @author_router.message(commands=["start"])
# async def admin_start(message: Message, state: FSMContext):

    
@author_router.message(content_types=types.ContentType.TEXT, state=reg_author.get_card)
async def admin_start(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(get_card=text) 
    btn = answer_speciality()
    await bot2.send_message(message.from_user.id,'–ß—É–¥–æ–≤–æ! üëç –í–∫–∞–∂–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "‚úÖ–ì–æ—Ç–æ–≤–æ"',reply_markup=btn.as_markup(resize_keyboard=True))
    await state.update_data(get_speciality = None) 
    await state.set_state(reg_author.get_speciality)
    
@author_router.message(content_types=types.ContentType.TEXT, state=reg_author.get_speciality)
async def admin_start(message: Message, state: FSMContext):
    text = message.text
    btn = confirm_buttons()
    if text != '–ì–æ—Ç–æ–≤–æ‚úÖ':
        answ = ''
        data = await state.get_data()
        answ = data['get_speciality']
        if answ:
            answ += '/' + text
            await state.update_data(get_speciality = answ) 
        else:
            await state.update_data(get_speciality = text) 

            
        await state.set_state(reg_author.get_speciality)
    else:
        data = await state.get_data()
        print(data['get_speciality'])
        spec = data['get_speciality'].split('/')
        await bot2.send_message(message.from_user.id,'–í—ñ—Ç–∞—é! ü•≥',reply_markup=types.ReplyKeyboardRemove())
        await bot2.send_message(message.from_user.id,"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞. –ë—É–¥—å –Ω–∞ –≥–æ—Ç–æ–≤—ñ, —Å–∫–æ—Ä–æ –±—É–¥—É—Ç—å –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.ü§©",reply_markup=btn.as_markup())
        await orders_update.reg_author(str(message.from_user.id),message.from_user.first_name,data['get_card'],spec)
        await state.clear()


# @author_router.message(commands=["show"])
@author_router.callback_query(lambda c: c.data == 'show')
async def admin_start(callback_query: types.CallbackQuery, state: FSMContext):
    userid = callback_query.from_user.id
    base = psycopg2.connect(
        dbname=config.db.database,
        user=config.db.user,
        password=config.db.password,
        host=config.db.host,)
    cur = base.cursor()
    data = (str(userid),)
    cur.execute('''SELECT * FROM orders WHERE author_id = %s and status IN ('–ü–ª–∞–Ω','–ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∏–π','–ü–ª–∞–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ','
–ü–ª–∞–Ω –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ','–í —Ä–æ–±–æ—Ç—ñ','–ü—Ä–∞–≤–∫–∏ –≤ —Ä–æ–±–æ—Ç—ñ') ORDER BY priority DESC''',data)
    orders = cur.fetchall()
    for order in orders:
        money = 0
        costs = order[17].split(',')
        money += float(costs[0])
        money += float(costs[1])
        await bot2.send_message(userid,f'''                        
üÜî: {order[1]}
üìå**–°—Ç–∞—Ç—É—Å**: {order[11]}
‚óΩÔ∏è **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç**:{order[28]}
‚óæÔ∏è –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å: {order[4]}
‚óΩÔ∏è –í–∏–¥ —Ä–æ–±–æ—Ç–∏: {order[5]}
‚óæÔ∏è –¢–µ–º–∞: {order[7]}
‚óΩÔ∏è –û–±—Å—è–≥: {order[6]} —Å—Ç.
‚óæÔ∏è –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å: {order[8]}
‚óΩÔ∏è –î–µ–¥–ª–∞–π–Ω: {order[26]}
‚óæÔ∏è –ö–æ–º–µ–Ω—Ç–∞—Ä: {order[18]}
üí∏ –¶—ñ–Ω–∞: {money}
                                ''')
    cur.close()
    base.close()   
        

# @author_router.message(commands=["earn"])
@author_router.callback_query(lambda c: c.data == 'earn')
async def admin_start(callback_query: types.CallbackQuery, state: FSMContext):
    userid = callback_query.from_user.id
    base = psycopg2.connect(
        dbname=config.db.database,
        user=config.db.user,
        password=config.db.password,
        host=config.db.host,)
    cur = base.cursor()
    data = (str(userid),)
    cur.execute('''SELECT * FROM orders WHERE author_id = %s and status IN ('–ì–æ—Ç–æ–≤–æ/–ø—Ä–∞–≤–∫–∏','–ü—Ä–∞–≤–∫–∏','–ü—Ä–∞–≤–∫–∏ –≤ —Ä–æ–±–æ—Ç—ñ','–ü—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ','–ì–æ—Ç–æ–≤–æ') ORDER BY priority DESC''',data)
    orders = cur.fetchall()
    mess = ''
    for order in orders:
        costs = order[17].split(',')
        cost_status = order[18].split(',')
        if cost_status[0] == 'false' and cost_status[1] == 'false':
            mess += f'{order[1]},{order[7]},{costs[21]},{costs[0]}\n'
        elif cost_status[0] == 'true' and cost_status[1] == 'false':
            mess += f'{order[1]},{order[7]},{costs[21]},{costs[1]}\n'
    await bot2.send_message(userid,mess)
    cur.execute('''SELECT * FROM orders WHERE author_id = %s and status IN ('–ì–æ—Ç–æ–≤–æ/–ø—Ä–∞–≤–∫–∏','–ü—Ä–∞–≤–∫–∏','–ü—Ä–∞–≤–∫–∏ –≤ —Ä–æ–±–æ—Ç—ñ','–ü—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ','–ì–æ—Ç–æ–≤–æ')''',data)
    orders = cur.fetchall()
    money = 0
    for order in orders:
        costs = order[17].split(',')
        cost_status = order[18].split(',')
        if cost_status[0] == 'false' and cost_status[1] == 'false':
            money += float(costs[0])
        elif cost_status[0] == 'true' and cost_status[1] == 'false':
            money += float(costs[1]) 
    await bot2.send_message(userid,"üíµ–°—É–º–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: " + str(money))
    cur.close()
    base.close() 


